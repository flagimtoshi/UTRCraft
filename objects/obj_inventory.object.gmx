<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_gold_chest</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-12</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>seli = 0;  // checkt ob die kiste gewählt ist
selnumb = 0; // ausgewählte zahl
slotnumber = 8; //anzahl der slots
repeat(slotnumber){
itemid[slotnumber] = 0; // item id
counti[slotnumber] = 0; //anzahl der items
}
pulse = 0;
er=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///seli
       if parrr = 0{
         //if selnumb!=1{
         ///scroll
if instance_exists(obj_controller_cursor){
   
    
    if gamepad_button_check_pressed(0,gp_shoulderl){
    if!selnumb=0{
    selnumb-=1
    }else{
    selnumb=9
    }
    }

    if gamepad_button_check_pressed(0,gp_shoulderr){
    if selnumb&lt;9{
    selnumb+=1
    }else{
    selnumb=0
    }
    }
    
    
}
         if mouse_wheel_down(){
         selnumb+=1;
         }
         
         //}
         
         //if selnumb&lt;(slotnumber){
         if mouse_wheel_up(){
         selnumb-=1;
         }
         //}
         if selnumb&lt;0{
         selnumb=slotnumber+1;
         }
         if selnumb&gt;slotnumber+1{
         selnumb=0;
         }
         
       }
         //selnumb=clamp(selnumb, 1, slotnumber);
   if keyboard_check_pressed(ord("1")){selnumb=0;}
   if keyboard_check_pressed(ord("2")){selnumb=1;}
   if keyboard_check_pressed(ord("3")){selnumb=2;}
   if keyboard_check_pressed(ord("4")){selnumb=3;}
   if keyboard_check_pressed(ord("5")){selnumb=4;}
   if keyboard_check_pressed(ord("6")){selnumb=5;}
   if keyboard_check_pressed(ord("7")){selnumb=6;}
   if keyboard_check_pressed(ord("8")){selnumb=7;}
   if keyboard_check_pressed(ord("9")){selnumb=8;}


pulse+=0.125
if pulse=8{
pulse=0
}




uiu=slotnumber;
repeat(slotnumber+1){
if instance_exists(obj_finger){
if (obj_finger.x &gt; (x+((2*scale_mult*8)*uiu)) 
and obj_finger.y &gt; y 
and obj_finger.x &lt; (x+((2*scale_mult*8)*uiu)) + (scale_mult*16) 
and obj_finger.y &lt; y + (scale_mult*16) )
{
    selnumb=uiu;
}}
uiu-=1;
}

x=view_xview
y=view_yview
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///random code

if obj_player.HP=0
{
    selnumb=slotnumber;
    repeat(slotnumber+1){

    repeat(counti[selnumb]){

    if!itemid[selnumb]=0{
    if!counti[selnumb]=0{

    //Block = control.itemss[itemid[selnumb]]
    //sBlock(x,y,Block)

    //drop_item(control.sprites[itemid[selnumb]],itemid[selnumb])
    op=instance_create(obj_player.x,obj_player.y,obj_item);
    op.item_index=control.sprites[itemid[selnumb]];
    op.index=itemid[selnumb];
    op.direction=random(360);
    op.speed=random_range(2,3);
    
    
    }
    }else{
    //nothing
    }

    }
    itemid[selnumb] = 0; // item id
    counti[selnumb] = 0; //anzahl der items
    
    selnumb-=1;
    }
    selnumb=0
//drop_item( sprite_index, 83);
}
if counti[clamp(selnumb,0,slotnumber)]=0{
itemid[clamp(selnumb,0,slotnumber)]=0
}
if selnumb=slotnumber+1{
if selnumb=slotnumber+1{
if er=1{
    audio_sound_pitch(snd_draw,random_range(0.78, 1.12)); 
    audio_play_sound(snd_draw,5,0);
    audio_sound_gain(snd_draw,0.5,0);
    er = 0;
    }
}else{
er=1
}
exit;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///block placement
op=0//default
if instance_exists(obj_controller_cursor){

if gamepad_button_check_pressed(0, gp_shoulderlb){

//if place_meeting(x,y,object551){

if pause=0{
if selectsolid = 0
{
if ! position_meeting(obj_controller_cursor.x,obj_controller_cursor.y,obj_solid){
if itemid[selnumb]!=0{
    counti[selnumb]-=1
    obj=itemid[selnumb]
    if counti[selnumb]=0{
        itemid[selnumb]=0
    }
    Block = control.objects[obj]
    
/*if server = true{request = "place"
rblock = Block
rx = mouse_x-4
ry = mouse_y-4
}*/

op=instance_create(obj_controller_cursor.x-4,obj_controller_cursor.y-4,Block)
//}

}

}
}
}

}
}
else
{
if mouse_check_button_pressed(mb_right){
//if menu=0{
//if place_meeting(x,y,object551){

if pause=0{
if selectsolid = 0
{
//if ! place_meeting(mouse_x,mouse_y,obj_solid){
if itemid[selnumb]!=0{
    counti[selnumb]-=1
    obj=itemid[selnumb]
    if counti[selnumb]=0{
        itemid[selnumb]=0
    }
    Block = control.objects[obj]
    
    
/*if server = true{request = "place"
rblock = Block
rx = mouse_x-4
ry = mouse_y-4
}*/

op=instance_create(mouse_x-4,mouse_y-4,Block)
//}

//}

}
}
}

}

}
//}
if op!=0{ // if not default
check_blocks_placed(op);
}
/*
if!instance_exists(obj_cre_inv) 
{
if selectsolid = false
{
sBlock(mouse_x-4,mouse_y-4,Block);
}else{
//nothing
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Item dropping
if keyboard_check_pressed(ord("Q")) or gamepad_button_check_pressed(0, gp_face2){
if ! keyboard_check(vk_shift){

if selectsolid = false{
if itemid[selnumb]!=0{
    counti[selnumb]-=1
    obj=itemid[selnumb]
    if counti[selnumb]=0{
        itemid[selnumb]=0
    }
    Block = control.itemss[obj]
opp=instance_create(get_mouse_pos("x"),get_mouse_pos("y"),obj_item)
opp.index=obj;
opp.item_index=control.sprites[obj]

}
}
         }else{


if selectsolid = false
{
if itemid[selnumb]!=0{
ioi=counti[selnumb]
    counti[selnumb]-=counti[selnumb]
    obj=itemid[selnumb]
    if counti[selnumb]=0{
        itemid[selnumb]=0
    }
    Block = control.itemss[obj]
repeat(ioi){
opp=instance_create(mouse_x,mouse_y,obj_item)
opp.index=obj;
opp.item_index=control.sprites[obj]
}

}

}

}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///invis

visible=obj_hp.visible
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self()
//lightning(image_index);

/*if seli=1{
    if! counti=0{

        if obj_player.y &gt; y{

            draw_sprite(cue_chest_item,0,x,y)
            draw_sprite_ext(spr_slot,0,x,y-9,0.5,0.5,0,image_blend,image_alpha)
            draw_sprite_ext(control.sprites[itemid],0,x+2,y-9+2,0.5,0.5,0,image_blend,image_alpha)
            draw_text_transformed(x+5,y-9+6,counti,0.2,0.2,0)

            }else{

            draw_sprite(cue_chest_item,0,x,y)
            draw_sprite_ext(spr_slot,0,x,y+9,0.5,0.5,0,image_blend,image_alpha)
            draw_sprite_ext(control.sprites[itemid],0,x+2,y+9+2,0.5,0.5,0,image_blend,image_alpha)
            draw_text_transformed(x+5,y+9+6,counti,0.2,0.2,0)

        }

    }else{
    draw_sprite(cue_chest_empty,0,x,y)

    }
}*/


//if obj_player.y &lt; y{
//draw_9slice_ext(x,y,x+8,y-8,spr_slot,0)
/*draw_sprite_ext(spr_slot,0,x,y-((8*slotnumber)/2),0.5,(1*slotnumber)/4,0,image_blend,image_alpha);
uiu=slotnumber
repeat(slotnumber){
draw_sprite_ext(control.sprites[itemid[uiu]],0,x+2,y-4*uiu,0.5,0.5,0,image_blend,image_alpha)
draw_text_transformed(x+5,y-4*uiu,string(counti[uiu]),0.1,0.1,0)
draw_sprite_ext(spr_selection_arrow,floor(pulse),x-2,y-4*selnumb,0.5,0.5,0,image_blend,image_alpha)
uiu-=1;
}
}else{*/
draw_set_font(fnt_pixels)
_scale_mult=scale_mult*2
//draw_sprite_ext(spr_slot,0,x/*x+8+((16*slotnumber)/2)*/,y,((1*(slotnumber+2))/2)*_scale_mult,0.5*_scale_mult,0,image_blend,image_alpha);
uiu=slotnumber
repeat(slotnumber+1){
draw_sprite_ext(spr_slot,0,x+((8*uiu)*_scale_mult),y,0.5*_scale_mult,0.5*_scale_mult,0,image_blend,image_alpha)
draw_sprite_ext(control.sprites[itemid[uiu]],0,x+(2*_scale_mult)+((8*uiu)*_scale_mult),y+(2*_scale_mult),0.5*_scale_mult,0.5*_scale_mult,0,image_blend,image_alpha)
if counti[uiu]&gt;1{
draw_text_transformed(x+(4*_scale_mult)+((8*uiu)*_scale_mult),y+(5*_scale_mult),string(counti[uiu]),0.3*_scale_mult,0.3*_scale_mult,0)
}
if selnumb!=slotnumber+1{
draw_sprite_ext(spr_sel,0,x+((8*selnumb)*_scale_mult),y,0.5*_scale_mult,0.5*_scale_mult,0,image_blend,image_alpha)
}else{
draw_sprite_ext(spr_sel_attak,0,x+((8*selnumb)*_scale_mult),y,0.5*_scale_mult,0.5*_scale_mult,0,image_blend,image_alpha)
}
uiu-=1;
}

 //draw_sprite_ext(spr_attak,2,view_xview+((16*scale_mult)*(slotnumber+1)),view_yview
 //,scale_mult,scale_mult,0,image_blend,image_alpha)
 //draw_sprite_ext(object_get_sprite(weapon_index),0,view_xview+((slotnumber+1)*(16*scale_mult))+(3.5*scale_mult),view_yview+(15.5*scale_mult),scale_mult,scale_mult,0,image_blend,image_alpha)
 
//}

//draw_text_transformed(x,y-9,string(slotnumber)+ " " +string(selnumb),0.2,0.2,0)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
